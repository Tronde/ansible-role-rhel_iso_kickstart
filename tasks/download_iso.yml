---
- name: 'Ensure download directory exists: {{ _download_directory }}'
  ansible.builtin.file:
    path: '{{ _download_directory }}'
    state: 'directory'
    owner: '{{ _download_directory_owner }}'
    group: '{{ _download_directory_group }}'
    mode: '{{ _download_directory_mode }}'
  become: true

- name: 'Set fact: Red Hat Portal API download URL'
  ansible.builtin.set_fact:
    __download_url: '{{ _redhat_portal_download_base_url }}/{{ _checksum }}/download'

- name: 'Gather information about the ISO to download'
  ansible.builtin.uri:
    url: '{{ __download_url }}'
    method: 'GET'
    follow_redirects: 'none'
    status_code: 307
    headers:
      Accept: '*/*'
      Authorization: 'Bearer {{ __access_token }}'
  register: __t_iso_information

- name: 'Ensure filename has been returned by the API'
  ansible.builtin.assert:
    that:
      - __t_iso_information.json is defined
      - __t_iso_information.json is not string
      - __t_iso_information.json is iterable
      - __t_iso_information.json is sequence
      - __t_iso_information.json is mapping

      - __t_iso_information.json.body is defined
      - __t_iso_information.json.body is not string
      - __t_iso_information.json.body is iterable
      - __t_iso_information.json.body is sequence
      - __t_iso_information.json.body is mapping

      - __t_iso_information.json.body.filename is defined
      - __t_iso_information.json.body.filename is string
      - __t_iso_information.json.body.filename != ''
      - __t_iso_information.json.body.filename != None
    success_msg: 'The API returned the filename of the ISO ({{ __t_iso_information.json.body.filename }})'
    fail_msg: 'The API did not return the filename of the ISO'
    quiet: '{{ _quiet_assert }}'

- name: 'Set fact: Extract filename of the ISO to download'
  ansible.builtin.set_fact:
    __iso_filename: '{{ __t_iso_information.json.body.filename }}'

- name: 'Set fact: Destination path for the ISO to download'
  ansible.builtin.set_fact:
    __iso_path: '{{ _download_directory }}/{{ __iso_filename }}'

- name: 'Download and verify the checksum of the ISO: {{ __iso_filename }}'
  ansible.builtin.get_url:
    url: '{{ __download_url }}'
    dest: '{{ __iso_path }}'
    headers:
      Accept: '*/*'
      Authorization: 'Bearer {{ __access_token }}'
    owner: '{{ _iso_owner }}'
    group: '{{ _iso_group }}'
    mode: '{{ _iso_mode }}'
    checksum: 'sha256:{{ _checksum }}'
    timeout: '{{ _download_timeout }}'
