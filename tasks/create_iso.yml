---
- name: 'create_iso | Ensure xorriso is present'
  ansible.builtin.package:
    name: '{{ _xorriso_package_name }},syslinux'
    state: 'present'
  become: true

- name: 'create_iso | Ensure the destination directory for the ISO exists: {{ _dest_dir_path }}'
  ansible.builtin.file:
    path: '{{ _dest_dir_path }}'
    state: 'directory'
    owner: '{{ _dest_dir_path_owner }}'
    group: '{{ _dest_dir_path_group }}'
    mode: '{{ _dest_dir_path_mode }}'
  become: true

- name: 'create_iso | Set fact: Destination ISO path'
  ansible.builtin.set_fact:
    __dest_iso_path: >-
      {{
        _dest_dir_path ~ '/' ~ __iso_filename | splitext | first ~ '-ks.iso'
        if _dest_iso_filename is not defined
        or _dest_iso_filename == ''
        or _dest_iso_filename == None
        else
        _dest_dir_path ~ '/' ~ _dest_iso_filename
      }}

- name: 'create_iso | Remove ISO if forced to recreate the ISO is asked for: {{ __dest_iso_path }}'
  ansible.builtin.file:
    path: '{{ __dest_iso_path }}'
    state: 'absent'
  become: true
  when: >
    _force_recreate_custom_iso is defined
    and _force_recreate_custom_iso

- name: 'create_iso | Retrieve the label of {{ __iso_path }}'
  ansible.builtin.command:
    cmd: 'blkid --match-tag=LABEL -o value {{ __iso_path }}'
  changed_when: false
  become: true
  register: '__t_label'

- name: 'create_iso | Set fact: label of {{ __iso_path }}'
  ansible.builtin.set_fact:
    __iso_label: '{{ __t_label.stdout }}'

# Note: Adding '-no-emul-boot' *twice* is necessary to avoid the following issue:
# https://unix.stackexchange.com/questions/491043/boot-grub-efi-img-invalid-image-size
# Command has been built according to https://access.redhat.com/solutions/60959
- name: 'create_iso | Create the ISO with the included kickstart at: {{ __dest_iso_path }}'
  ansible.builtin.command:
    argv:
      - 'mkisofs'
      - '-o'
      - '{{ __dest_iso_path }}'
      - '-b'
      - '{{ _isolinux_bin_path }}'
      - '-J'
      - '-R'
      - '-l'
      - '-c'
      - '{{ _boot_cat_path }}'
      - '-no-emul-boot'
      - '-boot-load-size'
      - '4'
      - '-boot-info-table'
      - '-eltorito-alt-boot'
      - '-e'
      - '{{ _uefi_image_path }}'
      - '-no-emul-boot'
      - '-graft-points'
      - '-joliet-long'
      - '-V'
      - '{{ __iso_label }}'
      - '{{ __src_files_path }}'
    creates: '{{ __dest_iso_path }}'
  become: true

- name: 'create_iso | Ensure ISO is bootable via BIOS and UEFI'
  ansible.builtin.command:
    argv:
      - 'isohybrid'
      - '--uefi'
      - '{{ __dest_iso_path }}'
  changed_when: true
  become: true

- name: 'create_iso | Block: Handle implanting of MD5 into ISO'
  become: true
  when: >
    _implant_md5 is defined
    and _implant_md5
  block:

    - name: 'create_iso | Ensure implantisomd5 is present'
      ansible.builtin.package:
        name: '{{ _implantisomd5_package_name }}'
        state: 'present'

    - name: 'create_iso | Implant MD5 checksum into the ISO'
      ansible.builtin.command:
        cmd: 'implantisomd5 {{ __dest_iso_path }}'
      changed_when: true

- name: 'create_iso | Ensure created ISO has the proper permissions'
  ansible.builtin.file:
    path: '{{ __dest_iso_path }}'
    owner: '{{ _custom_iso_owner }}'
    group: '{{ _custom_iso_group }}'
    mode: '{{ _custom_iso_mode }}'
  become: true
...
